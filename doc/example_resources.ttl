# ---------------------------------
# Example resources
# NB: these assume the same set of prefixes as in the ontology turtle file

# /graph/emails
# /id/emails/:email
# e.g. /id/emails/<hash-goes-here>

<email> a arts:Email;
  arts:emailSender </id/people/alex-swirrl-com>;
  arts:emailRecipient </id/people/ric-swirrl-com>;
  arts:emailSubject "Coffee machine broken.";
  arts:ccRecipient </id/people/bill-swirrl-com>;
  arts:ccRecipient </id/people/guy-swirrl-com>;
  arts:hasDomain </id/domains/swirrl-com>;
  arts:sentAt ""^^xsd:dateTime;
  .

# /graph/tweets
# /id/tweets/:tweet
# e.g. /id/tweets/<hash-goes-here>

<tweet> a arts:Tweet;
  arts:tweetSender </id/twitter-accounts/hipsters_unite>;
  arts:content "The @swirrl office is full today...";
  arts:mentions "@swirrl";
  .

# /graph/endorsements
# /id/endorsements/:endorsement
# e.g. /id/endorsements/<hash-goes-here>

<endorsement> a arts:LinkedInEndorsement;
  arts:hasLinkedInSkill </id/linkedin-skill/writing-ontologies>; # the skill being endorsed
  arts:endorser </id/people/jango-fett-swirrl-com>; # this will be a name, which we will have to look up as the arts:linkedInProfileName listed against a known Person. There may be a more foolproof way of doing this.
  arts:endorsee </id/people/alex-swirrl-com>; # this will be a name, which we will have to look up as the arts:linkedInProfileName listed against a known Person. There may be a more foolproof way of doing this.
  arts:receivedAt ""^^xsd:dateTime;
  .

# /graph/recommendations
# /id/recommendations/:recommendation
# e.g. /id/recommendations/<hash-goes-here>

<tweet> a arts:LinkedInRecommendation;
  arts:recommender </id/people/jango-fett-swirrl-com>; # this will be a name, which we will have to look up as the arts:linkedInProfileName listed against a known Person. There may be a more foolproof way of doing this.
  arts:recommendee </id/people/alex-swirrl-com>; # this will be a name, which we will have to look up as the arts:linkedInProfileName listed against a known Person. There may be a more foolproof way of doing this.
  arts:receivedAt ""^^xsd:dateTime;
  .

# /graph/people
# /id/people/:person

<person> a foaf:Person;
  foaf:account </id/twitter-accounts/hipsters_unite>;
  foaf:account </id/email-accounts/alex-swirrl-com>;
  foaf:account </id/email-accounts/alex-his-second-email-com>; # see line 93
  foaf:account </id/linkedin-accounts/alex-swirrl-com>;
  foaf:name "Alex Lynham"; 
  arts:linkedInProfileName "Alex Lynham"; # this should be from LinkedIn (ln 90) if available as it means you can reference from endorsements and recommendations
  foaf:givenName "Alex";
  foaf:familyName "Lynham";
  foaf:knows </id/people/robin-infonomics-ltd-uk>;
  foaf:made </id/emails/hash-goes-here>;
  vcard:hasEmail "alex@swirrl.com";
  foaf:mbox "alex@swirrl.com";
  org:memberOf </id/organisations/swirrl>;
  .

# /graph/twitter-accounts
# /id/twitter-accounts/:account

<twitteraccount> a arts:TwitterAccount;
  foaf:accountName "hipsters_unite"; # NB an arts:tweetSender will probably be a arts:TwitterAccount; the TwitterAccount will link to the foaf:Agent or subclass. Contrast with arts:emailSender
  .

# /graph/email-accounts
# /id/email-accounts/:account
# this is included for the sake of symmetry, but is not key to the ontology.

<emailaccount> a arts:EmailAccount;
  foaf:accountName "Alex Lynham"; # the 'Personal' metadata; may be blank
  vcard:hasEmail "alex@swirrl.com"; # NB an arts:emailSender should be a subclass of foaf:Agent
  .

# /graph/linkedin-accounts
# /id/linkedin-accounts/:account
# this is included for the sake of symmetry, but is not key to the ontology.

<linkedinaccount> a arts:LinkedInAccount;
  foaf:accountName "Alex Lynham";
  foaf:name "Alex Lynham";
  vcard:hasEmail "alex@swirrl.com";
  vcard:hasEmail "alex@his-second-email.com";
  arts:hasLinkedInSkill </id/linkedin-skill/writing-ontologies>;
  .

# /graph/linkedin-skills
# /id/linkedin-skills/:linkedin-skill
# e.g. /id/linkedin-skills/<hash-goes-here>

<linkedinskill> a arts:LinkedInSkill;
  rdfs:label "Writing ontologies";
  .

# /graph/organisations
# /id/organisations/:org

<organisation> a org:Organization;
  rdfs:label "Swirrl";
  org:hasMember </id/people/alex-swirrl-com>;
  org:hasMember </id/people/ric-swirrl-com>;
  org:linkedTo </id/organisations/infonomics>;
  arts:ownsDomain </id/domains/swirrl-com>;
  arts:worksOn </id/projects/arts-api>;
  .

# /graph/domains
# /id/domains/:domain

<domain> a arts:Domain;
  rdfs:label "swirrl.com";
  vcard:hasUrl "http://swirrl.com"
  .
